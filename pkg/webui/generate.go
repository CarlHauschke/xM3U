// The following directive is necessary to make the package coherent:

//go:build ignore
// +build ignore

// This program generates webUI_gen.go. It can be invoked by running
// go generate
package main

import (
	"bufio"
	"encoding/base64"
	"log"
	"os"
	"path/filepath"
	"text/template"
	"time"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package webui

var Assets = make(map[string]interface{})

func LoadHTMLMap() {
{{ range $key, $value := .Map }}
    Assets["{{ $key }}"] = "{{ $value }}"
{{ end }}
}
`))

var blankMap = make(map[string]string)

func main() {
	f, err := os.Create("../webui/webUI_gen.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	path := "html"
	os.Chdir("../../")
	err = filepath.Walk(path, readFilesToMap)
	if err != nil {
		log.Fatal(err)
	}

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Map       map[string]string
	}{
		Timestamp: time.Now(),
		Map:       blankMap,
	})
}

func readFilesToMap(path string, info os.FileInfo, err error) error {
	if info.IsDir() == false {
		base64Str := fileToBase64(getLocalPath(path))
		blankMap[path] = base64Str
	}

	return nil
}

func fileToBase64(file string) string {
	imgFile, _ := os.Open(file)
	defer imgFile.Close()

	// create a new buffer base on file size
	fInfo, _ := imgFile.Stat()
	size := fInfo.Size()
	buf := make([]byte, int64(size))

	// read file content into buffer
	fReader := bufio.NewReader(imgFile)
	fReader.Read(buf)

	imgBase64Str := base64.StdEncoding.EncodeToString(buf)

	return imgBase64Str
}

func getLocalPath(filename string) string {
	path, file := filepath.Split(filename)
	newPath := filepath.Dir(path)

	newFileName := newPath + "/" + file

	return newFileName
}
